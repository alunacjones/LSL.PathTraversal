{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#lslpathtraversal","title":"LSL.PathTraversal","text":"<p>This library provides a static method for enumerating up a directory hierarchy from a given initial path or the current directory if no initial path is provided.</p>"},{"location":"#locating-a-file-in-the-hierarchy","title":"Locating a file in the hierarchy","text":"<p>The following example attempts to locate a file in the hierarchy, starting from  the value of <code>Directory.GetCurrentDirectory()</code>:</p> <pre><code>// Necessary usings:\nusing LSL.PathTraversal;\n\n...\n\nvar fileInfo = TraversePath.Enumerate()\n    // GetFileInfo is an extension method to the DirectoryInfo class\n    .Select(directoryInfo =&gt; directoryInfo.GetFileInfo(filename))\n    .FirstOrDefault(fileInfo =&gt; fileInfo.Exists)\n\n// If the file was found then fileInfo will provide all information\n// otherwise fileInfo will be null\n</code></pre>"},{"location":"iz01-merging-settings/","title":"Merging settings","text":"<p>Sometimes it is useful to merge settings from the top of a hierarchy down to the deeper initial folder such as with <code>.gitignore</code> files.</p> <p>The following example uses <code>Newtonsoft.Json</code> to merge json documents to provide a final settings file.</p> <p>Note</p> <p>We reverse the found files list so that we start merging from the file found highest in the hierarchy i.e. the one nearest the root of the file system.</p>"},{"location":"iz01-merging-settings/#assumed-folder-structure","title":"Assumed folder structure","text":"<p>Warning</p> <p>This structure is assuming that we are at he root of the file system and will therefore not encounter any further files except for the ones we specified. </p> <p>This would not normally be the case and we would want to either limit how far up the tree we go or take into account further files.</p> <pre><code>\u251c\u2500\u2500 my-app-settings.json \n\u251c\u2500\u2500 inner1\n\u2502   \u251c\u2500\u2500 my-app-settings.json\n|   \u251c\u2500\u2500 inner2\n\u2502   |   \u251c\u2500\u2500 my-app-settings.json\n</code></pre>"},{"location":"iz01-merging-settings/#my-app-settingsjson-content","title":"<code>/my-app-settings.json</code> content","text":"<pre><code>{\n    \"Integer\": 12\n}\n</code></pre>"},{"location":"iz01-merging-settings/#inner1my-app-settingsjson-content","title":"<code>/inner1/my-app-settings.json</code> content","text":"<pre><code>{\n    \"String\": \"inner1-string\",\n    \"StringArray\": [\n        \"inner1-item1\",\n        \"inner1-item2\"\n    ]        \n}\n</code></pre>"},{"location":"iz01-merging-settings/#inner1inner2my-app-settingsjson-content","title":"<code>/inner1/inner2/my-app-settings.json</code> content","text":"<pre><code>{\n    \"Integer\": 99,\n    \"StringArray\": [\n        \"inner2-item1\",\n        \"inner2-item2\",\n        \"inner2-item3\"\n    ]        \n}\n</code></pre>"},{"location":"iz01-merging-settings/#code-sample","title":"Code sample","text":"<p>Note</p> <p>Clicking the  button in the top right of the code sample will take you to a fuller dotnet fiddle to run the code.</p> <pre><code>// This path will be relative to the current folder\nvar files = TraversePath.Enumerate(\"inner1/inner2\")\n    .Select(di =&gt; di.GetFileInfo(\"my-app-settings.json\"))   \n    .Reverse();\n\nvar currentValue = JObject.Parse(\"{}\");\n\nforeach (var file in files)\n{\n    var content = File.ReadAllText(file.FullName);\n    currentValue.Merge(\n        JObject.Parse(content), \n        new() { MergeArrayHandling = MergeArrayHandling.Replace });\n}\n\nvar result = currentValue.ToObject&lt;MergeData&gt;();\n\n/*\n    result will be equivalent to:\n\n    new MergeData \n    {\n        Integer = 99,\n        String = \"inner1-string\",\n        StringArray = [\n            \"inner2-item1\",\n            \"inner2-item2\",\n            \"inner2-item3\"\n        ]\n    }    \n*/\n</code></pre>"}]}